// Based on path.Segment.js, as part of Paper.js - The Swiss Army Knife of Vector Graphics Scripting.
// http://paperjs.org/
// Copyright (c) 2011 - 2019, Juerg Lehni & Jonathan Puckey
// http://scratchdisk.com/ & https://puckey.studio/
//
// Distributed under the MIT license. See LICENSE file for detail
//
// All rights reserved.

import Point from "../basic/Point"
import Rectangle from "../basic/Rectangle";

export default class Vertex {

	//handles are relative to the point
	constructor(point, parentMark, id) {
		this.type = "vertex";
		this._id = id;
		this.x = point.x;
		this.y = point.y;
		this.dataScope = undefined;
		this.parent = parentMark; 

		this.shape = undefined;
		this.width = 0;
		this.height = 0;
		this.radius = 0;
		this.fillColor = "#555";
		this.opacity = 1;
		this.strokeWidth = 0;
		this.strokeColor = "#aaa";
		this._polarAngle = undefined;
	}

	get bounds() {
		switch(this.shape) {
			case "rect":
				return new Rectangle(this.x - this.width/2, this.y - this.height/2, this.width, this.height);
			case "circle":
				return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);
			default:
				return new Rectangle(this.x - 0.5, this.y - 0.5, 1, 1);
		}
	}

	get id() {
		return this.parent.id + "_v_" + this._id;
	}

	toJSON() {
		let json = {};
		json.type = this.type;
		json.id = this._id;
		json.x = this.x;
		json.y = this.y;
		if (this.dataScope)
			json.dataScope = this.dataScope.toJSON();
		if (this._polarAngle !== undefined)
			json.polarAngle = this._polarAngle;
		json.shape = this.shape;
		json.width = this.width;
		json.height = this.height;
		json.radius = this.radius;
		json.fillColor = this.fillColor;
		json.opacity = this.opacity;
		json.strokeWidth = this.strokeWidth;
		json.strokeColor = this.strokeColor;
		return json;
	}

	static fromJSON(json, parent) {
		let v = new Vertex(json, parent, json.id);
		if (json.dataScope)
			v.dataScope = json.dataScope;
		if ("polarAngle" in json)
			v.polarAngle = json.polarAngle;
		v.shape = json.shape;
		v.width = json.width;
		v.height = json.height;
		v.radius = json.radius;
		v.fillColor = json.fillColor;
		v.opacity = json.opacity;
		v.strokeWidth = json.strokeWidth;
		v.strokeColor = json.strokeColor;
		return v;
	}

	_doTranslate(dx, dy) {
		this.x += dx;
		this.y += dy;
	}

	_clone(parent) {
		let v = new Vertex(new Point(this.x, this.y), parent, this._id);
		if (this.dataScope) {
			v.dataScope = this.dataScope.clone();
		}
		v.shape = this.shape;
		v.width = this.width;
		v.height = this.height;
		v.radius = this.radius;
		v.fillColor = this.fillColor;
		v.opacity = this.opacity;
		v.strokeWidth = this.strokeWidth;
		v.strokeColor = this.strokeColor;
		return v;
	}

	set polarAngle(a) {
		this._polarAngle = a;
	}

	get polarAngle() {
		return this._polarAngle;
	}
}

Vertex.styles = ["vxShape", "vxWidth", "vxHeight", "vxRadius", "vxFillColor", "vxStrokeColor", "vxStrokeWidth", "vxOpacity"];