import Path from "./Path";
import Segment from "../Segment";
import {ItemType} from "../../util/Constants"

export default class RectPath extends Path {
	
	constructor(args) {
		super(args);
		// this.type = ItemType.Rect;
		// this.closed = true;

		//add last segment to close the path
		// if (args && "vertices" in args)
		// 	this.segments.push(new Segment(this.vertices[3], this.vertices[0], this, this.segmentCounter++));
	}

	get width() {
		return this.vertices[1].x - this.vertices[0].x;
	}

	get height() {
		return this.vertices[2].y - this.vertices[1].y;
	}

	set height(ht) {
		this.resize(this.width, ht);
	}

	set width(wd) {
		this.resize(wd, this.height);
	}

	get left() {
		return this.vertices[0].x;
	}

	get top() {
		return this.vertices[0].y;
	}

	get right() {
		return this.vertices[1].x;
	}

	get bottom() {
		return this.vertices[2].y;
	}

	get area() {
		return this.width * this.height;
	}

	//override path's resize method, by default, keep the left and top segments intact
	resize(wd, ht, xRef, yRef) {
		if (xRef === "right") {
			this.vertices[0].x = this.vertices[1].x - wd;
			this.vertices[3].x = this.vertices[0].x;
		} else {
			this.vertices[1].x = this.vertices[0].x + wd;
			this.vertices[2].x = this.vertices[1].x;
		}
		if (yRef === "top") {
			this.vertices[3].y = this.vertices[0].y + ht;
			this.vertices[2].y = this.vertices[3].y;
		} else {
			this.vertices[0].y = this.vertices[3].y - ht;
			this.vertices[1].y = this.vertices[0].y;
		}
		
		this._updateBounds();
	}

	get leftSegment() {
		return this.segments[3];
	}

	get rightSegment() {
		return this.segments[1];
	}

	get topSegment() {
		return this.segments[0];
	}

	get bottomSegment() {
		return this.segments[2];
	}
}