import Mark from "./Mark";
import Rectangle from "../../basic/Rectangle";
import {ItemType} from "../../util/Constants";
import { getTextSize } from "../../util/ItemUtil";

export default class PointText extends Mark {

    constructor(args) {
		super(args);
        this.type = ItemType.PointText;
        this.attrs["x"] = 0;
        this.attrs["y"] = 0;
        if (!("fontSize" in this.styles))
            this.styles["fontSize"] = "12px";
        if (!("fontFamily" in this.styles))
            this.styles["fontFamily"] = "Arial, sans-serif";
        if (!("fontWeight" in this.styles))
            this.styles["fontWeight"] = "normal";
        if (!("fillColor" in this.styles))
            this.styles["fillColor"] = "black";

        if (args !== undefined) {
            if ("x" in args) {
                this.attrs["x"] = args["x"];
            }

            if ("y" in args) {
                this.attrs["y"] = args["y"];
            }
    
            if ("text" in args) {
                this.attrs["text"] = args["text"];
            } else {
                this.attrs["text"] = "";
            }

            if ("anchor" in args) {
                this.attrs["anchor"] = args["anchor"];
            } else {
                this.attrs["anchor"] = ["center", "middle"];
            }
        }
        this._updateBounds();
    }

    copyPropertiesTo(target) {
		target.styles = Object.assign({}, this.styles);
		if (this._dataScope)
			target._dataScope = this._dataScope.clone();
		target.x = this.attrs["x"];
        target.y = this.attrs["y"];
		target.text = this.text;
		target.anchor = [this.anchor[0], this.anchor[1]];
	}

    get bounds() {
		if (!this._bounds)
			this._updateBounds();
		return this._bounds;
	}

    get refBounds() {
        return this.bounds;
    }

    set text(text) {
        this.attrs["text"] = text;
        this._updateBounds();
    }

    get text() {
        return this.attrs["text"];
    }

    _doTranslate(dx, dy) {
		this.attrs["x"] += dx;
        this.attrs["y"] += dy;
		this._updateBounds();
	}

	_updateBounds() {
        let size = getTextSize(this.attrs["text"], [this.fontWeight, this.styles["fontSize"], this.fontFamily].join(" "), parseFloat(this.fontSize));
        let wd = size.width, ht = size.height;
        let left;
        switch (this.attrs["anchor"][0]){
            case "left":
                left = this.attrs["x"];
                break;
            case "right":
                left = this.attrs["x"] - wd;
                break;
            case "center":
                left = this.attrs["x"] - wd/2;
                break;
            default:
                left = this.attrs["x"];
                break;
        }
        let top;
        switch (this.attrs["anchor"][1]){
            case "top":
                top = this.attrs["y"];
                break;
            case "bottom":
                top = this.attrs["y"] - ht;
                break;
            case "middle":
                top = this.attrs["y"] - ht/2;
                break;
        }
		this._bounds = new Rectangle(left, top, wd, ht);
	}

    get center() {
        return {x: this.bounds.left + this.bounds.width/2, y: this.bounds.top + this.bounds.height/2};
    }

    get x() {
        return this.attrs["x"];
    }

    set x(v){
        this.attrs["x"] = v;
        this._updateBounds();
    }

    get y() {
        return this.attrs["y"];
    }

    set y(v){
        this.attrs["y"] = v;
        this._updateBounds();
    }

    get anchor() {
        return this.attrs["anchor"];
    }

    set anchor(a) {
        this.attrs["anchor"] = a;
        this._updateBounds();
    }

    get horzAnchor() {
        return this.attrs["anchor"][0];
    }

    get vertAnchor() {
        return this.attrs["anchor"][1];
    }

    set horzAnchor(a) {
        this.attrs["anchor"][0] = a;
        this._updateBounds();
    }

    set vertAnchor(a) {
        this.attrs["anchor"][1] = a;
        this._updateBounds();
    }

    //return integer
    get fontSize() {
        return parseFloat(this.styles["fontSize"]);
    }

    set fontSize(f) {
        if (typeof f === "number")
            this.styles["fontSize"] = f + "px";
        else
            this.styles["fontSize"] = f;
        this._updateBounds();
    }

    get fontWeight() {
        return this.styles["fontWeight"];
    }

    set fontWeight(w) {
        this.styles["fontWeight"] = w;
        this._updateBounds();
    }

    get fontFamily() {
        return this.styles["fontFamily"];
    }

    set fontFamily(f) {
        this.styles["fontFamily"] = f;
        this._updateBounds();
    }

    get fillColor() {
		return this.styles["fillColor"];
	}

	set fillColor(c) {
		this.styles["fillColor"] = c;
	}
}