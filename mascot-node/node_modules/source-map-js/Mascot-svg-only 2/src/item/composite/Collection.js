import Group from "./Group";
import {atlas_rowId, DataType, ItemType} from "../../util/Constants";
import {CanvasProvider, ItemCounter} from "../../util/ItemUtil";

export default class Collection extends Group{

	constructor() {
		super();
		this.type = ItemType.Collection;
		this._id = this.type + ItemCounter[this.type]++;
		this.classId = this.id;
		this._childrenOrder = undefined;
	}

	get childrenOrder() {
		if (!this._childrenOrder)
			return {"field": "atlas_rowId", "direction": "asc"};
		else
			return this._childrenOrder;
	}

	set childrenOrder(o) {
		if (!("field" in o) && !("direction" in o)) return;
		let field = o.field;
		if (!this.dataScope.dataTable.hasField(field)) {
			console.warn("Cannot order collection children by an non-existent field", o.field);
			return;
		}
		this._childrenOrder = o;
		let f; 
		if (field === atlas_rowId) {
			f = (a, b) =>  parseInt(a.dataScope.getFieldValue(field).substring(1)) - parseInt(b.dataScope.getFieldValue(field).substring(1));
		} else {
			let type = this.children[0].dataScope.getFieldType(field);
			switch (type) {
				case DataType.Date:
					break;
				case DataType.Number:
				case DataType.Integer:
					f = (a, b) =>  a.dataScope.aggregateNumericalField(field) - b.dataScope.aggregateNumericalField(field);
					break;
				case DataType.String:
					if (o.ranking)
						f = (a, b) => o.ranking.indexOf(a.dataScope.getFieldValue(field)) - o.ranking.indexOf(b.dataScope.getFieldValue(field));
					else
						f = (a, b) =>  (a.dataScope.getFieldValue(field) < b.dataScope.getFieldValue(field) ? -1 : 1 );
					break;
			}
		}
		this.children.sort(f);
		
		if (o.direction == "desc")
			this.children.reverse();
		if (this.layout)
			this.layout.run();
	}

	duplicate() {
		let coll = this.getScene().collection();
		for (let i = 0; i < this.children.length; i++) {
			let c = this.children[i];
			coll.addChild(c.duplicate());
		}
		coll.classId = this.classId;
		this.parent.addChild(coll);
		if (this._layout) {
			let layout = this._layout.clone();
			coll.layout = layout;
		}
		return coll;
	}

	contains(x, y) {
		let irregular2Ds = [ItemType.Arc, ItemType.Pie, ItemType.Polygon, ItemType.Area];
		if (irregular2Ds.indexOf(this.firstChild.type) >= 0) {
			let svgData = this.getSVGPathData();
			if (svgData !== "") {
				let ctx = CanvasProvider.getContext(),
						p = new Path2D(svgData);
				ctx.lineWidth = Math.max(this.strokeWidth, 2.5);
				ctx.stroke(p);
				return ctx.isPointInPath(p, x, y);
			} 
		}
		if (!this._bounds) {
			this._updateBounds();
		}
		return this._bounds.contains(x, y);
	}
	
	getSVGPathData() {
		let d = "";
		for (let i of this.children) {
			if (i.getSVGPathData)
				d += i.getSVGPathData();
			else if (i.bounds) {
				let b = i.bounds;
				d += ["M", b.left, b.top].join(" ");
				d += ["L", b.right, b.top].join(" ");
				d += ["L", b.right, b.bottom].join(" ");
				d += ["L", b.left, b.bottom, "Z"].join(" ");
			}
		}
		return d;
	}
}