import {DataType} from "../util/Constants";
import DataScope from "../data/DataScope";
import { nodeId } from "../util/Constants";
import Scale from "../core/Scale";

export function bindToText(encoding){

	encoding._query = function() {
		this.data = [];
		
		let field, items = this.items, dt;
		if (this.field.startsWith("parent.") || this.field.startsWith("child.")) {
			dt = this.datatable.tree.nodeTable;
			field = this.field.split(".")[1];
			let s = this.field.split(".")[0];
			let nodeIds = items.map(d => d.dataScope).map(d => d.getFieldValue(s));
			if (dt.getFieldType(field) == DataType.Integer || dt.getFieldType(field) == DataType.Number)
				this.data = nodeIds.map(d => (new DataScope(dt)).cross(nodeId, d).aggregateNumericalField(field));
			else
				this.data = nodeIds.map(d => (new DataScope(dt)).cross(nodeId, d).getFieldValue(field));
		} else {
			dt = this.datatable;
			field = this.field;
			if (dt.getFieldType(field) == DataType.Integer || dt.getFieldType(field) == DataType.Number)
				this.data = items.map(d => d.dataScope.aggregateNumericalField(field, this.aggregator));
			else
				this.data = items.map(d => d.dataScope.getFieldValue(field));
		}
	}

	encoding._map = function() {
		if (this.scale) {
		} else {
			switch (this.datatable.getFieldType(this.field)) {
				case DataType.Boolean:
					break;

				case DataType.Date:
					break;

				case DataType.String:
				default: //integer or number
					this.scale = new Scale("ordinal");
					this.scale.domain = [...new Set(this.data)];
                    this.scale._scale.range(this.scale.domain.map(d => d + ""));
					break;
			}
		}
	}

	encoding._apply = function() {
		for (let i = 0; i < this.items.length; i++) {
			let peer = this.items[i], value = this.scale.map(this.data[i]);
			peer.text = value;
		}
	}

	encoding.run();
	return encoding;
}