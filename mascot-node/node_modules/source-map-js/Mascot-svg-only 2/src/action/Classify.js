import DataScope from "../data/DataScope";
import { ItemType } from "../util/Constants";
import { getPeers } from "../util/ItemUtil";

export function classifiable(item) {
	if (item.type !== ItemType.Collection) return false;
	if (item.children.length < 2) return false;
	// if (!Array.isArray(items)) return false;
	// if (items.length < 1) return false;
	// for (let i of items) {
	// 	if (!i.dataScope)
	// 		return false;
	// }
	// let tbls = uniqueStrings(items.map(d => d.dataScope.dataTable.name));
	// if (tbls.length > 1) return false;
	return true;
}

export function classifyCollectionChildren(scene, c, field, layout) {
    let peers = getPeers(c, scene);
    for (let p of peers) {
        let collections = {}, cid, items = p.children;
        for (let item of items) {
            let v = item.dataScope.getFieldValue(field);
            if (!(v in collections)) {
                collections[v] = [];
            }
            collections[v].push(item);
        }
        let tbl = items[0].dataScope._dt; //results = []; //,
        for (let v in collections) {
            let coll = scene.collection();
            p.addChild(coll);
            if (cid === undefined)
                cid = coll.id;
            coll.classId = cid;
            coll.dataScope = p.dataScope ? p.dataScope.cross(field, v) : new DataScope(tbl).cross(field, v);
            for (let c of collections[v]) {
                coll.addChild(c);
            }
            // if (layout)
            //     coll.layout = layout;
            //results.push(coll);
        }
        // if (oldParent.children.length === 0) {
        //     oldParent.parent.removeChild(oldParent);
        // }
    }

    if (layout)
        scene.setProperties(c.firstChild, {layout: layout});
    //return results;
}