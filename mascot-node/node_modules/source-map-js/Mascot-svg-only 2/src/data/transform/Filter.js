import DataTable from "../DataTable";

export default function filter(table, predicates) {
    let data = [];
    for (let row of table.data){
        let include = true;
        for (let p of predicates){
            if (!satisfy(row, p)){
                include = false;
                break;
            }
        }
        if (include)
            data.push(row);
    }
    let dt = new DataTable(data, table.url);
    dt.sourceDataTable = table;
    dt.transform = {"type": "filter", "args": predicates};
    return dt;
}

function satisfy(row, p){
    if ("field" in p) {
        let f = p["field"];
        if ("value" in p)
            return row[f] == p["value"];
        else if ("range" in p)
            return row[f] >= p["range"][0] && row[f] <= p["range"][1];
        else if ("values" in p)
            return p["values"].indexOf(row[f]) >= 0;
    } else if ("fields" in p) {
        let f1 = p["fields"][0], f2 = p["fields"][1],
            v1 = row[f1], v2 = row[f2];
        switch (p["operator"]) {
			case "==":
				return v1 == v2;
			case ">":
				return v1 > v2;
			case ">=":
				return v1 >= v2;
			case "<":
				return v1 < v2;
			case "<=":
				return v1 <= v2;
		}
        return false;
    }
}
