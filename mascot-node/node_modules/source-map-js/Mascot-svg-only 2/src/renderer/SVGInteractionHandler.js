import * as d3 from 'd3';
import { atlas_rowId, ItemType } from '../util/Constants';
import { getPeers } from "../util/ItemUtil";
import Brush from './../interaction/brush';

export default class SVGInteractionHandler {

    constructor(svgRenderer) {
        this._renderer = svgRenderer;
        this._globalPredicates = {};
    }
    created = 0;

    processInteraction(i, scene) {
        if (!i.target || !i.targetEval || !i.targetEval['false']) return
        if (i.listener.type == ItemType.Scene) {
            const originalProperties = [];
            getPeers(i.target, scene).forEach(path => {
                const obj = {};
                Object.keys(i.targetEval['false']).forEach(prop => {
                    obj[prop] = (path[prop]);
                });
                originalProperties.push(obj);
            });
            // if (i.event == 'click') {
            //     this._processClick(i, scene, originalProperties);
            // }
            if (i.event == 'brush' || i.event == 'click') {
                if (this.created == 0) {
                    // new Brush(this._renderer._svgId, '#9c3131', null).brush()
                    this.created = new Brush(this._renderer._svgId, '#9c3131', i.hitObject._bounds).brush();
                    document.addEventListener('brush', (e) => {
                        this._processBrush1(i, scene, originalProperties, e.detail.selection ? { selection: e.detail.selection } : null);
                        if (e.detail.selection == undefined) {
                            this._processClick(i, scene, originalProperties, e.detail.e);
                        }
                    });
                }
            }
        }
    }



    _processBrush1(i, scene, originalProperties, e) {
        let brushPredicateEvaluators = {};
        if (i.event == 'brush') {
            if (i.predicate.length <= 0) return;
            i.predicate.forEach(ele => {
                if (ele.type == 'range') {
                    let rangeData = []
                    if (i.hitObject.type == 'axis') {
                        i.hitObject._labels.children.forEach(_ => {
                            rangeData.push({
                                axisCoordinate: _[ele.channel], actualValue: _.text
                            })
                        });
                    } else if (i.hitObject.type == 'collection') {
                        i.hitObject.children.forEach(_ => {
                            rangeData.push({
                                axisCoordinate: _[ele.channel], actualValue: _.dataScope.getFieldValue(ele.field)
                            })
                        });
                    }
                    rangeData.sort((a, b) => a.axisCoordinate - b.axisCoordinate)
                    brushPredicateEvaluators[ele.channel] = {
                        _actualLabels: rangeData.map(e => e.actualValue),
                        _axisCoordinates: rangeData.map(e => e.axisCoordinate)
                    }
                    rangeData = null;
                } else {
                    // Brush should not have other predicates
                    // Confirm with Leo
                    throw new Error(`Event Type Brush should not have ${i.predicate.type} as Predicate Type`)
                }
            });
        }
        if (e && e.selection) {
            let _r = {
                'x': [e.selection[0][0], e.selection[1][0]],
                'y': [e.selection[0][1], e.selection[1][1]]
            }
            let _range = { 'x': null, 'y': null };

            Object.entries(brushPredicateEvaluators).forEach(entry => {
                const [key, value] = entry;
                let val1 = value._actualLabels[d3.bisect(value._axisCoordinates, _r[key][0])]
                let val2 = value._actualLabels[d3.bisect(value._axisCoordinates, _r[key][1]) - 1]
                _range[key] = {
                    _high: val1 >= val2 ? val1 : val2,
                    _low: val1 < val2 ? val1 : val2
                }
            });
            let _x = i.predicate.filter(e => _range['x'] && e.channel == 'x')[0]
            let _y = i.predicate.filter(e => _range['y'] && e.channel == 'y')[0];
            let _1, _2 = false;
            getPeers(i.target, scene).forEach((path, _i) => {
                if (_x) {
                    _1 = _range['x']['_high'] >= path.dataScope.getFieldValue(_x['field']) &&
                        _range['x']['_low'] <= path.dataScope.getFieldValue(_x['field'])
                }
                if (_y) {
                    _2 = _range['y']['_high'] >= path.dataScope.getFieldValue(_y['field']) &&
                        _range['y']['_low'] <= path.dataScope.getFieldValue(_y['field'])
                }
                if ((_x == undefined && _2) || (_y == undefined && _1) || (_1 && _2)) {
                    this.setTargetProperties(originalProperties[_i], path);
                } else {
                    this.setTargetProperties(i.targetEval['false'], path);
                }
            });
        } else {
            getPeers(i.target, scene).forEach((path, _i) => {
                this.setTargetProperties(originalProperties[_i], path);
            });
        }
        this._renderer.render(scene, { visualOnly: true });
    }

    _processClick(i, scene, originalProperties, $e) {
        i = scene._interactionsObj['click']
        let multiSelectSet = new Set();
        if (i.predicate[0].type == 'point') {
            //continent done
            //country - can leverage multi select done
            if ($e.target.id.includes(i.target.type)) {
                const _ = getPeers(i.target, scene).filter(e => e.id == $e.target.id);
                if (_.length > 0) {
                    getPeers(i.target, scene).forEach((path, _i) => {
                        if (path.dataScope.getFieldValue(i.predicate[0].field) == _[0].dataScope.getFieldValue(i.predicate[0].field)) {
                            this.setTargetProperties(originalProperties[_i], path);
                        } else {
                            this.setTargetProperties(i.targetEval['false'], path);
                        }
                    });
                }
            } else if (i.hitObject.type == 'legend' && i.hitObject.encoding.datatable._fieldSummaries[i.predicate[0].field].unique.includes($e.target.innerHTML)) {
                getPeers(i.target, scene).forEach((path, _i) => {
                    if (path.dataScope.getFieldValue(i.predicate[0].field) == $e.target.innerHTML) {
                        this.setTargetProperties(originalProperties[_i], path);
                    } else {
                        this.setTargetProperties(i.targetEval['false'], path);
                    }
                });
            } else {
                getPeers(i.target, scene).forEach((path, _i) => {
                    this.setTargetProperties(originalProperties[_i], path);
                });
            }
        } else if (i.predicate[0].type == 'list') {
            // countries done
            // continents
            if (i.predicate[0].multiByField) {
                // select Multiple fields  by continents for instance
                if ($e.target.id.includes(i.target.type)) {
                    const _ = getPeers(i.target, scene).filter(e => e.id == $e.target.id);
                    if (_.length > 0) {
                        multiSelectSet.add(_[0].dataScope.getFieldValue(i.predicate[0].field));
                        getPeers(i.target, scene).forEach((path, _i) => {
                            if (multiSelectSet.has(path.dataScope.getFieldValue(i.predicate[0].field))) {
                                this.setTargetProperties(originalProperties[_i], path);
                            } else {
                                this.setTargetProperties(i.targetEval['false'], path);
                            }
                        });
                    }
                } else {
                    multiSelectSet.clear();
                    getPeers(i.target, scene).forEach((path, _i) => {
                        this.setTargetProperties(originalProperties[_i], path);
                    });
                }
            } else {
                if ($e.target.id.includes(i.target.type)) {
                    if (multiSelectSet.has($e.target.id)) {
                        multiSelectSet.delete($e.target.id); // deselect
                    } else {
                        multiSelectSet.add($e.target.id);
                    }
                    getPeers(i.target, scene).forEach((path, _i) => {
                        if (multiSelectSet.has(path.id)) {
                            this.setTargetProperties(originalProperties[_i], path);
                        } else {
                            this.setTargetProperties(i.targetEval['false'], path);
                        }
                    });
                } else {
                    multiSelectSet.clear();
                    getPeers(i.target, scene).forEach((path, _i) => {
                        this.setTargetProperties(originalProperties[_i], path);
                    });
                }
            }
        }
        this._renderer.render(scene, { visualOnly: true });
    }

    evaluatePredicate(i, path, _range) {
        if (i.predicate.type == 'range') {
            return path.dataScope.getFieldValue(i.predicate.field) <= _[0] && path.dataScope.getFieldValue(i.predicate.field) >= _[1]
        }
    }

    setTargetProperties(obj, path) {
        Object.keys(obj).forEach(prop => {
            try {
                path[prop] = obj[prop];
            } catch (error) {
                console.log('Property not found');
            }
        });
    }

    _getSelection(e, selDef, listener, item) {
        let selection = {};
        if (item) {
            selection.item = item;
        } else if (selDef.item) {
            //TODO
        }

        let field = selDef.field ? selDef.field : atlas_rowId;
        if (selection.item) {
            selection.predicate = { "field": field, "value": selection.item.dataScope.getFieldValue(field) };
        } else {
            //from axis
        }
        return selection;
    }

    addGlobalPredicate(scene, p) {
        if (!(scene.id in this._globalPredicates)) {
            this._globalPredicates[scene.id] = {};
        }
        this._globalPredicates[scene.id][p.field] = p;
    }

    getGlobalPredicates(scene) {
        return (scene.id in this._globalPredicates) ? Object.values(this._globalPredicates[scene.id]) : [];
    }
}