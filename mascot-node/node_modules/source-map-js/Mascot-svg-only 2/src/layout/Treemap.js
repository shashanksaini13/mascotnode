import * as d3 from "d3";
import Layout from "./Layout";

export default class TreemapLayout extends Layout {

    constructor(args) {
        super(args);
        this.type = "treemap";
        this._width = args["width"];
        this._height = args["height"];
        this._top = args["top"];
        this._left = args["left"];
    }

    toJSON() {
        let json = {args: {}};
		json.type = this.type;
		json.args.left = this._left;
		json.args.top = this._top;
		json.args.width = this._width;
		json.args.height = this._height;
		return json;
    }

    clone() {
        return new TreemapLayout({width: this._width, height: this._height, top: this._top, left: this._left});
    }

    run() {
        if (this.group == undefined || !this.group.children || this.group.children.length == 0)
			return;
        let w = this._width ? this._width : this.group.bounds.width,
            h = this._height ? this._height : this.group.bounds.height,
            top = this._top === undefined ? this.group.bounds.top : this._top,
            left = this._left === undefined ? this.group.bounds.left : this._left;
        let hierarchy = d3.hierarchy((this.group)).sum(d => d.type == "rect" ? d.bounds.width * d.bounds.height : 0);
        d3.treemap().size([w,h])(hierarchy);
        this._apply(hierarchy, left, top);
        this.group.getScene()._updateAncestorBounds(hierarchy.leaves()[0].data);
    }

    _apply(node, left, top) {
        if (node.data.type == "collection" && node.children) {
            for (let c of node.children)
                this._apply(c, left, top);
        } else if (node.data.type == "rect") {
            node.data.resize(node.x1 - node.x0, node.y1 - node.y0);
            node.data._doTranslate(node.x0 + left - node.data.bounds.left, node.y0 + top - node.data.bounds.top);
        }
    }

    get width() {
        return this._width;
    }

    set width(w) {
        this._width = w;
        this.run();
    }

    get height() {
        return this._width;
    }

    set height(h) {
        this._height = h;
        this.run();
    }

    get top() {
        return this._top;
    }

    set top(t) {
        this._top = t;
        this.run();
    }

    get left() {
        return this._left;
    }

    set left(l) {
        this._left = l;
        this.run();
    }
} 