import * as d3 from "d3";
import Layout from "./Layout";

export default class PackingLayout extends Layout {

    constructor(args) {
        super(args);
		this.type = "packing";
        this.x = "x" in args ?  args.x : 400;
        this.y = "y" in args ? args.y : 400;
        this.width = args.width;
        this.height = args.height;
	}

    toJSON() {
        let json = {args: {}};
		json.type = this.type;
		json.args.x = this.x;
		json.args.y = this.y;
		json.args.width = this.width;
		json.args.height = this.height;
		return json;
    }

    clone() {
		return new PackingLayout({x: this.x, y: this.y, width: this.width, height: this.height});
	}

    run() {
		if (this.group == undefined)
			return;
        let nodes = this.group.children.map(d => ({"name": d.id, "radius": d.radius, "itm": d}));

        let area = nodes.reduce((total, current) => total + Math.pow(current.radius, 2), 0),
            s = Math.sqrt(area);
        
        if (this.width === undefined) {
            this.width = s;
        }

        if (this.height === undefined) {
            this.height = s;
        }

        let data = d3.hierarchy({name: "root", children: nodes}).sum(d => d.radius ? d.radius : 0).sort((a, b) => b.value - a.value);
        d3.pack().size([this.width, this.height]).radius(d => d.value)(data);

        for (let c of data.children) {
            let itm = c.data.itm;
            let dx = this.x - data.x + c.x - itm.x, dy = this.y - data.y + c.y - itm.y;
            itm._doTranslate(dx, dy);
        }
        this.group._updateBounds();
    }

}