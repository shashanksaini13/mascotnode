import { LayoutType } from "../util/Constants";
import Layout from "./Layout";
import * as d3 from "d3";

export default class ForceLayout extends Layout {

    constructor(args) {
        super(args);
        this.type = LayoutType.Force;
        this._x = "x" in args ? args.x : 0;
        this._y = "y" in args ? args.y : 0;
        this._iterations = "iterations" in args ? args.iterations : 1;
        this._repulsion = "repulsion" in args ? args.repulsion : 30;
        this._attraction = "attraction" in args ? args.attraction : 1;
        this._linkDistance = "linkDistance" in args ? args.linkDistance : 30;
    }

    toJSON() {
        let json = {args: {}};
		json.type = this.type;
		json.args.x = this._x;
		json.args.y = this._y;
		json.args.iterations = this._iterations;
		return json;
    }

    run() {
        if (this.group == undefined)
            return;
        let graph = this.group.children[0].dataScope._dt.graph;
        
        if (graph) {
            let links = graph.links.map(d => ({ source: graph.getNode(d.source), target: graph.getNode(d.target) }));
            let simulation = d3.forceSimulation(graph.nodes)
                                .force("charge", d3.forceManyBody().strength(-this._repulsion))
                                .force("link", d3.forceLink(links).id(d => d.id).distance(this._linkDistance))
                                .force("x", d3.forceX())
                                .force("y", d3.forceY())
                                .force("center", d3.forceCenter(this._x, this._y).strength(this._attraction))
                                ;
            simulation.stop();
            simulation.tick(this._iterations);
            
            for (let i = 0; i < this.group.children.length; i++) {
                this.group.children[i].x = graph.nodes[i].x;
                this.group.children[i].y = graph.nodes[i].y;
            }
            this.group._updateBounds();
            this.group.getScene()._updateAncestorBounds(this.group);
        }
    }
}