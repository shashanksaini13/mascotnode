import Layout from "./Layout";
import * as d3 from "d3";
import { Errors, LayoutType, nodeId, Orientation } from "../util/Constants";

export default class TidyTreeLayout extends Layout {

    constructor(args) {
        super(args);
        this.type = LayoutType.TidyTree;
        this._width = "width" in args ? args.width : 500;
        this._height = "height" in args ? args.height : 500;
        this._left = "left" in args ? args.left : 100;
        this._top = "top" in args ? args.top : 100;
        this._orientation = "orientation" in args ? args.orientation : Orientation.Horizontal;
    }
    
    toJSON() {
        let json = {args: {}};
		json.args.type = this.type;
		json.args.orientation = this._orientation;
		json.args.left = this._left;
		json.args.top = this._top;
		json.args.width = this._width;
		json.args.height = this._height;
		return json;
    }

    run() {
        if (this.group == undefined)
			return;
        let dt = this.group.children[0].dataScope._dt;
        if (dt.tree) {
            let hierarchy = d3.hierarchy(dt.tree._data);
            let wd = Math.max(...this.group.children.map(d => d.bounds.width)), ht = Math.max(...this.group.children.map(d => d.bounds.height));
            let size = this._orientation == Orientation.Horizontal ? [this._height, this._width] : [this._width, this._height];
            let tree = d3.tree().nodeSize([wd, ht]).size(size)(hierarchy);
            this._apply(tree, this.group);
            this.group._updateBounds();
            this.group.getScene()._updateAncestorBounds(this.group);
        } else {
            throw Errors.LAYOUT_WITHOUT_TREE;
        }
    }

    _apply(d3Tree, coll) {
        let mark = coll.children.filter(d => d.dataScope.getFieldValue(nodeId) == d3Tree.data[nodeId])[0];

        let x, y;
        switch (this._orientation) {
            case Orientation.Horizontal:
                x = d3Tree.y + this._left;
                y = d3Tree.x + this._top;
                break;
            case Orientation.Vertical:
                x = d3Tree.x + this._left;
                y = this._top + d3Tree.y;
                break;
        }

        mark.x = x;
        mark.y = y;
        
        if (d3Tree.children && d3Tree.children.length > 0) {
            for (let c of d3Tree.children)
                this._apply(c, coll);
        }
    }

    get orientation() {
        return this._orientation;
    }

    set orientation(o) {
        this._orientation = o;
        this.run();
    }

    get width() {
        return this._width;
    }

    set width(w) {
        this._width = w;
        this.run();
    }

    get height() {
        return this._width;
    }

    set height(h) {
        this._height = h;
        this.run();
    }

    get size() {
        return [this._width, this._height];
    }

    set size(s) {
        this._width = s[0];
        this._height = s[1];
        this.run();
    }
}