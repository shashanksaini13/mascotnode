function loadScript(s, demo, renderer, dest) {
    let script = s;
    // eslint-disable-next-line no-undef
    let parsed = acorn.parse(script, { ecmaVersion: "latest" });
    let blocks = parsed.body.map((d) => script.substring(d.start, d.end));

    //find lines with renderer and remove them
    blocks = blocks.filter((l) => l.indexOf("render") < 0);

    //add renderer lines
    let sceneName = blocks
        .filter((l) => l.indexOf("msc.scene(") > 0)[0]
        .split("=")[0]
        .replace("let", " ")
        .trim();
    let newScript =
        blocks.join("\n") + "\n" +
        "let renderer = msc.renderer('" + renderer + "','" + dest + "');\n" + 
        "renderer.clear();\n" +
        "renderer.render(" + sceneName + ");\n" + 
        "return " + sceneName + ";";

    newScript = makeAsync(newScript);
    let scn = eval(newScript);
    scn.then(r => {
        window.scene = r.toJSON();
        window.demo = demo;
    });
}

function makeAsync(s) {
    // let c =
    //   "try {\n" +
    //   s +
    //   "\n} catch (err) {showError(err.name ? err.name + ': ' + err.message : undefined, 0, 0, 0, err);}";
    return "(async () => {" + s + "})();";
  }

// eslint-disable-next-line no-unused-vars
function refresh() {
    let demo = window.location.hash.replace("#", "");
    if (demo && demo != "") {
        var oReq = new XMLHttpRequest();
        oReq.addEventListener("load", function () {
            loadScript(this.responseText, demo, "svg", "svgElement");
        });
        oReq.open("GET", "../demos/static/" + demo[0].toLowerCase() + demo.substring(1) + ".js");
        oReq.send();
    }
}