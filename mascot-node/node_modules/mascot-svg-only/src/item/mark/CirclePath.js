import Path from "./Path";
import Rectangle from "../../basic/Rectangle";

export default class CirclePath extends Path {
	
	constructor(args) {
		super(args);
		
		// this.type = ItemType.Circle;
		// this.closed = true;
		this.attrs["x"] = "x" in args ? args.x : 0;
		this.attrs["y"] = "y" in args ? args.y : 0;
		this.attrs["radius"] = "radius" in args ? args.radius : 100;
		// this.attrs["x"] = args.hasOwnProperty("x") ? args.x : 0;
		// this.attrs["y"] = args.hasOwnProperty("y") ? args.y : 0;
		// this.attrs["radius"] = args.hasOwnProperty("radius") ? args.radius : 100;
	}

	get radius() {
		return this.attrs["radius"];
	}

	get x() {
		return this.attrs["x"];
	}

	get y() {
		return this.attrs["y"]; //this.attrs["y"];
	}

	get area() {
		return Math.PI * Math.pow(this.radius, 2);
	}

	set x(v) {
		this.attrs["x"] = v;
		this._updateBounds();
	}

	set y(v) {
		this.attrs["y"] = v;
		this._updateBounds();
	}

	set radius(r) {
		this.attrs["radius"] = r;
		this._updateBounds();
	}

	set area(a) {
		this.attrs["radius"] = Math.sqrt(a);
		this._updateBounds();
	}

	// set width(w) {
	// 	this.attrs["radius"] = w/2;
	// 	this._updateBounds();
	// }

	// set height(h) {
	// 	this.attrs["radius"] = h/2;
	// 	this._updateBounds();
	// }

	resize(w, h, xRef, yRef) {
		let r = Math.min(w, h)/2, diff = r - this.attrs["radius"];
		this.attrs["radius"] = r;
		if (xRef == "right") {
			this.attrs["x"] -= diff;
		} else {
			this.attrs["x"] += diff;
		}
		if (yRef == "top") {
			this.attrs["y"] += diff;
		} else {
			this.attrs["y"] -= diff;
		}
		this._updateBounds();
	}

	_doTranslate(dx, dy) {
		this.attrs["x"] += dx;
		this.attrs["y"] += dy;
		this._updateBounds();
	}

	_updateBounds() {		
		this._bounds = new Rectangle(this.attrs["x"] - this.attrs["radius"], this.attrs["y"] - this.attrs["radius"], this.attrs["radius"] * 2, this.attrs["radius"] * 2);
	}

	copyPropertiesTo(target) {
		super.copyPropertiesTo(target);
		target.attrs["x"] = this.attrs["x"];
		target.attrs["y"] = this.attrs["y"];
		target.attrs["radius"] = this.attrs["radius"];
	}

	getSVGPathData() {
		return ["M", this.x, this.y, "m", -this.radius, ", 0 a", this.radius, ",", this.radius, "0 1,0", this.radius * 2, ",0 a", this.radius, ",", this.radius, "0 1,0", -(this.radius * 2), ",0"].join(" ");
	}

}