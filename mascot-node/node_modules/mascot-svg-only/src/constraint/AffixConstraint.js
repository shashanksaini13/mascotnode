import { ConstraintType, ItemType } from "mascot-svg-only/src/util/Constants";
import { getPeers } from "mascot-svg-only/src/util/ItemUtil";

export default class AffixConstraint {

    constructor(item, baseItem, scene, channel, itemAnchor, baseAnchor, offset) {
        this.item = item;
        this.baseItem = baseItem;
        this.scene = scene;
        this.channel = channel;
        this.itemAnchor = itemAnchor;
        this.baseAnchor = baseAnchor;
        this.offset = offset;
        this.type = ConstraintType.Affix;
        this.id = this.type + "_" + this.item.classId + "_" + this.baseItem.classId + "_" + channel;
    }

    apply() {
        let items = getPeers(this.item, this.scene), baseItems = getPeers(this.baseItem, this.scene);
        //console.log(items.map(d => d.text), baseItems.map(d => d.dataScope.getFieldValue("event_attribute")));
        let ia = this.itemAnchor,
            ba = this.baseAnchor;

        let isText = this.item.type == ItemType.PointText ? true : false;
        if (this.channel == "radialDistance") {
            for (let i = 0; i < items.length; i++) {
                let dist, base = baseItems[i], item = items[i];
                if (base.type == ItemType.Arc || base.type == ItemType.Ring)
                    dist = ba == "top" ? base.outerRadius + this.offset : ba == "bottom" ? base.innerRadius + this.offset : (base.outerRadius + base.innerRadius)/2 + this.offset;
                else if (base.type == ItemType.Circle)
                    dist = ba == "top" ? base.radius + this.offset : ba == "bottom" ? this.offset : base.radius/2 + this.offset;
                item._doTranslate( base.x - item.x, base.y - dist - item.bounds[ia] );
                if (item._rotate) {
                    item._rotate = [item._rotate[0], base.x, base.y];
                } else {
                    item._rotate = [0, base.x, base.y];
                }
            }
        } else if (this.channel == "angle") {
            for (let i = 0; i < items.length; i++) {
                let angle, base = baseItems[i], item = items[i];
                if (base.type == ItemType.Arc) {
                    angle = ba == "left" ? base.endAngle + this.offset : ba == "center" ?  base.startAngle + base.angle/2 + this.offset : base.startAngle + this.offset;
                } else {
                    angle = 90;
                }
                // switch (ba) {
                //     case "left":
                //         angle = base.endAngle ? base.endAngle + this.offset : 90;
                //         break;
                //     case "center":
                //         angle = base.startAngle ? base.startAngle + base.angle/2 + this.offset : 90;
                //         break;
                //     case "right":
                //         angle = base.startAngle ? base.startAngle + this.offset : 90;
                //         break;
                // }
                if (item._rotate) {
                    item._rotate[0] = 90 - angle;
                } else {
                    item._doTranslate( base.x - item.bounds[ia], base.y - items[i].y );
                    item._rotate = [90 - angle, baseItems[i].x, baseItems[i].y];
                }
            }
        } else {
            let frac;
            if (this.baseItem.type == ItemType.Link) {
                switch(ba) {
                    case "left":
                    case "top":
                        frac = 0;
                        break;
                    case "center":
                    case "middle":
                        frac = 0.5;
                        break;
                    case "right":
                    case "bottom":
                        frac = 1;
                        break;
                }
            }
            for (let i = 0; i < items.length; i++) {
                let p = this.baseItem.type == ItemType.Link ? baseItems[i].getPointAt(frac)[this.channel] : baseItems[i].bounds[ba] + this.offset;
                if (isText) {
                    items[i].anchor[this.channel == "x" ? 0 : 1] = this.itemAnchor;
                    items[i][this.channel] = p;
                } else {
                    if (this.channel == "x")
                        items[i]._doTranslate(p - items[i].bounds[ia], 0);
                    else
                        items[i]._doTranslate(0, p - items[i].bounds[ia]);
                }
            }
        }
        
        this.item.getScene()._updateAncestorBounds(this.item);
        this.baseItem.getScene()._updateAncestorBounds(this.baseItem); 
        
        // if (isText) {
        //     for (let i = 0; i < items.length; i++) {
        //         items[i].anchor[this.channel == "x" ? 0 : 1] = this.itemAnchor;
        //         let p = baseItems[i].bounds[ba] + this.offset;
        //         items[i][this.channel] = p;
        //     }
        // } else {
        //     for (let i = 0; i < items.length; i++) {
        //         let d = baseItems[i].bounds[ba] + this.offset - items[i].bounds[ia];
        //         if (this.channel == "x")
        //             items[i]._doTranslate(d, 0);
        //         else
        //             items[i]._doTranslate(0, d);
        //     }
        // }
    }

    toJSON() {
        let json = {};
        json.item = this.item.id;
        json.baseItem = this.baseItem.id;
        json.channel = this.channel;
        json.itemAnchor = this.itemAnchor;
        json.baseAnchor = this.baseAnchor;
        json.offset = this.offset;
        json.type = "affixation";
        json.id = this.id;
        return json;
    }
}