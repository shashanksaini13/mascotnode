// Based on basic.Point.js, as part of Paper.js - The Swiss Army Knife of Vector Graphics Scripting.
// http://paperjs.org/
// Copyright (c) 2011 - 2019, Juerg Lehni & Jonathan Puckey
// http://scratchdisk.com/ & https://puckey.studio/
//
// Distributed under the MIT license. See LICENSE file for detail
//
// All rights reserved.

import {isZero, TRIGONOMETRIC_EPSILON} from "../util/Numerical"

export default class Point {
	
	constructor(x, y) {
		this.x = x;
		this.y = y;
	}

	transform(matrix) {
        return matrix ? matrix._transformPoint(this) : this;
	}

	negate() {
        return new Point(-this.x, -this.y);
    }

	subtract(point) {
		return new Point(this.x - point.x, this.y - point.y);
	}

    isZero() {
    	return isZero(this.x) && isZero(this.y)
    }

	/**
	* Checks if the vector represented by this point is collinear (parallel) to
	* another vector.
	*
	* @param {Point} point the vector to check against
	* @return {Boolean} {@true it is collinear}
	*/
     isCollinear(point) {
     	let x1 = this.x,
     		y1 = this.y,
     		x2 = point.x,
     		y2 = point.y;
     	return Math.abs(x1 * y2 - y1 * x2) <= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2)) 
     		* /*#=*/TRIGONOMETRIC_EPSILON;
    }

}